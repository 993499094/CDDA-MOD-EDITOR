{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,sBAC7B,GAAqB,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,gBAAiBJ,OACrB,CACJ,IAAIM,EAAuB,iBAAZL,QAAuBD,EAAQG,QAAQ,iBAAmBH,EAAQD,EAAc,SAC/F,IAAI,IAAIQ,KAAKD,GAAuB,iBAAZL,QAAuBA,QAAUF,GAAMQ,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAOC,qCCTVP,EAAOD,QAAUQ,ICCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaZ,QAGrB,IAAIC,EAASQ,EAAyBE,GAAY,CAGjDX,QAAS,CAAC,GAOX,OAHAc,EAAoBH,GAAUV,EAAQA,EAAOD,QAASU,GAG/CT,EAAOD,OACf,CCrBAU,EAAoBK,EAAI,CAACf,EAASgB,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBQ,EAAEF,EAAYC,KAASP,EAAoBQ,EAAElB,EAASiB,IAC5EE,OAAOC,eAAepB,EAASiB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDP,EAAoBQ,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFd,EAAoBkB,EAAK5B,IACH,oBAAX6B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAepB,EAAS6B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAepB,EAAS,aAAc,CAAE+B,OAAO,GAAO,wICgBvD,SAASC,EAAuBC,EAAcC,GAMjD,MAAMC,UAAyBD,EAS3BE,mBAAmBC,EAAOC,GAEtB,OAAKA,aAA6C,EAASA,EAAUC,QAAU,oBAGxEC,MAAMJ,mBAAmBC,EAAOC,EAC3C,EAKJ,OAAO,cAA6BL,EAQhCQ,gBAAgBC,GAEZ,OAAO,IAAIP,EAAiB5B,KAAMmC,EACtC,EAER,CACO,MAAMC,EAAiBX,EAAuB,mBAA0B,sBAC/E,0BAAgC,gCAAiCW,GChDjE,4BAAkC,CAC9B,CACI,KAAQ,mBACR,SAAY,GACZ,OAAU,SACV,MAAS,cACT,QAAW,2BACX,QAAW,2BACX,QAAW,oBACX,WAAc,CACV,iCAyCZ,sBAA4B,8BAnCI,WAC5BpC,KAAKqC,cAAe,EACpBrC,KAAKsC,aAAe,WACZtC,KAAKuC,YAAcvC,KAAKwC,SAAS,SACjCxC,KAAKyC,YAAY,SAEXzC,KAAKuC,YAAevC,KAAKwC,SAAS,UACxCxC,KAAK0C,iBAAiB,SACjBC,YAAY3C,KAAK4C,WAAU,IAC3BD,YAAY3C,KAAK4C,WAAU,IAGpC,IAAK,IAAI7C,EAAI,EAAGA,EAAIC,KAAKuC,WAAYxC,IAOjC,GAHIC,KAAKwC,SAAS,MAAQzC,KAAOC,KAAKwC,SAAS,QAAUzC,IACrDC,KAAKyC,YAAY,MAAQ1C,IAExBC,KAAKwC,SAAS,MAAQzC,GAAI,CAC3B,MAAM8C,EAAQ7C,KAAK0C,iBAAiB,QAAU3C,GACpC,IAANA,GACA8C,EAAMF,YAAY,kCAEtB3C,KAAK8C,iBAAiB,MAAQ/C,GAAGgD,SAAS,mBAC9C,CAGJ,IAAK,IAAIhD,EAAIC,KAAKuC,WAAYvC,KAAKwC,SAAS,MAAQzC,GAAIA,IACpDC,KAAKyC,YAAY,QAAU1C,GAC3BC,KAAKyC,YAAY,MAAQ1C,EAEjC,EACAC,KAAKsC,cACT,ICrDA,MAAMU,EAAmB,2BAIzB,kCAA6CpC,OAAOqC,OAAO,CAAC,EAAGD,EAAkB,CAC7EE,KAAM,WACFF,EAAiBE,KAAKC,MAAMnD,MAC5BA,KAAKqC,cAAe,CACxB,EAEAC,aAAc,WAENtC,KAAKuC,YAAcvC,KAAKwC,SAAS,SACjCxC,KAAKyC,YAAY,SAEXzC,KAAKuC,YAAevC,KAAKwC,SAAS,UACxCxC,KAAK0C,iBAAiB,SAASC,YAAY,gCAG/C,IAAK,IAAI5C,EAAI,EAAGA,EAAIC,KAAKuC,WAAYxC,IACjC,IAAKC,KAAKwC,SAAS,MAAQzC,GAAI,CAC3B,MAAM8C,EAAQ7C,KAAK0C,iBAAiB,QAAU3C,GACpC,IAANA,GACA8C,EAAMF,YAAY,oCAEtB3C,KAAK8C,iBAAiB,MAAQ/C,GAAGgD,SAAS,mBAC9C,CAGJ,IAAK,IAAIhD,EAAIC,KAAKuC,WAAYvC,KAAKwC,SAAS,MAAQzC,GAAIA,IACpDC,KAAKyC,YAAY,QAAU1C,GAC3BC,KAAKyC,YAAY,MAAQ1C,EAEjC,IChCJ,MAAMqD,EAAwB,8BAC9B,qCAAgDxC,OAAOqC,OAAO,CAAC,EAAGG,EAAuB,CACrFF,KAAM,WACF,IAAIG,EACJD,EAAsBF,KAAKC,MAAMnD,MACjCA,KAAKqC,cAAe,EACe,QAAlCgB,EAAKrD,KAAKwC,SAAS,iBAA8B,IAAPa,GAAyBA,EAAGN,SAAS,mBACpF,ICHG,MAAMO,EAA8B,WACvC,mBAA8B,0BAC9B,2BACI,kCACJ,8BACI,oCACR","sources":["webpack://@blockly/renderer-inline-row-separators/webpack/universalModuleDefinition","webpack://@blockly/renderer-inline-row-separators/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/renderer-inline-row-separators/webpack/bootstrap","webpack://@blockly/renderer-inline-row-separators/webpack/runtime/define property getters","webpack://@blockly/renderer-inline-row-separators/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/renderer-inline-row-separators/webpack/runtime/make namespace object","webpack://@blockly/renderer-inline-row-separators/./src/inline_row_separators_renderer.ts","webpack://@blockly/renderer-inline-row-separators/./src/inline_text_join.ts","webpack://@blockly/renderer-inline-row-separators/./src/inline_lists_create_with.ts","webpack://@blockly/renderer-inline-row-separators/./src/inline_procedures_defreturn.ts","webpack://@blockly/renderer-inline-row-separators/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__573__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__573__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Defines a renderer that renders dummy inputs like line breaks.\n */\nimport * as Blockly from 'blockly/core';\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**\n * This function creates a new Blockly Renderer that is based on the provided\n * Renderer but it always enforces that any input connector following a dummy\n * input will be rendered on a new row.\n *\n * @param rendererBase A class extending Blockly.blockRendering.Renderer that\n *     the new renderer will be derived from.\n * @param renderInfoBase A class extending Blockly.blockRendering.RenderInfo\n *     that should be compatible with the provided rendererBase.\n * @returns The new renderer class. It's up to you to register it with Blockly.\n */\nexport function addInlineRowSeparators(rendererBase, renderInfoBase) {\n    /**\n     * A subclass of the provided RenderInfo that renders all dummy inputs like\n     * line breaks, forcing any following input to be rendered on a separate row,\n     * even when the block type definition has `\"inputsInline\": true`.\n     */\n    class InlineRenderInfo extends renderInfoBase {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        /**\n         * Decide whether to start a new row between the two Blockly.Inputs.\n         *\n         * @param input The first input to consider\n         * @param lastInput The input that follows.\n         * @returns True if the next input should be rendered on a new row.\n         */\n        shouldStartNewRow_(input, lastInput) {\n            /* eslint-enable @typescript-eslint/naming-convention */\n            if ((lastInput === null || lastInput === void 0 ? void 0 : lastInput.type) === Blockly.inputTypes.DUMMY) {\n                return true;\n            }\n            return super.shouldStartNewRow_(input, lastInput);\n        }\n    }\n    /**\n     * A subclass of the provided Renderer that uses the new RenderInfo object.\n     */\n    return class InlineRenderer extends rendererBase {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        /**\n         * Create a new instance of the renderer's render info object.\n         *\n         * @param block The block to measure.\n         * @returns The render info object.\n         */\n        makeRenderInfo_(block) {\n            /* eslint-enable @typescript-eslint/naming-convention */\n            return new InlineRenderInfo(this, block);\n        }\n    };\n}\nexport const InlineRenderer = addInlineRowSeparators(Blockly.thrasos.Renderer, Blockly.thrasos.RenderInfo);\nBlockly.blockRendering.register('thrasos-inline-row-separators', InlineRenderer);\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Defines inline_text_join, which is an alternative\n * version of the text_join block that specifies inline input mode and\n * adds dummy inputs between value inputs.\n */\nimport * as Blockly from 'blockly/core';\n// Define a new block that is like the built-in block, but with an extension\n// that enables inline input mode and overrides the updateShape_ method to\n// insert dummy inputs between value inputs.\nBlockly.defineBlocksWithJsonArray([\n    {\n        'type': 'inline_text_join',\n        'message0': '',\n        'output': 'String',\n        'style': 'text_blocks',\n        'helpUrl': '%{BKY_TEXT_JOIN_HELPURL}',\n        'tooltip': '%{BKY_TEXT_JOIN_TOOLTIP}',\n        'mutator': 'text_join_mutator',\n        'extensions': [\n            'inline_text_join_extension',\n        ],\n    },\n]);\n// An extension that enables inline input mode and overrides the updateShape_\n// method to insert dummy inputs between value inputs.\nconst inlineTextJoinExtension = function () {\n    this.inputsInline = true;\n    this.updateShape_ = function () {\n        if (this.itemCount_ && this.getInput('EMPTY')) {\n            this.removeInput('EMPTY');\n        }\n        else if (!this.itemCount_ && !this.getInput('EMPTY')) {\n            this.appendDummyInput('EMPTY')\n                .appendField(this.newQuote_(true))\n                .appendField(this.newQuote_(false));\n        }\n        // Add new inputs.\n        for (let i = 0; i < this.itemCount_; i++) {\n            // If the block was already rendered with value inputs but not dummy\n            // inputs, delete and recreate the inputs to ensure the dummy inputs\n            // are properly inserted between the value inputs.\n            if (this.getInput('ADD' + i) && !this.getInput('DUMMY' + i)) {\n                this.removeInput('ADD' + i);\n            }\n            if (!this.getInput('ADD' + i)) {\n                const dummy = this.appendDummyInput('DUMMY' + i);\n                if (i === 0) {\n                    dummy.appendField(Blockly.Msg['TEXT_JOIN_TITLE_CREATEWITH']);\n                }\n                this.appendValueInput('ADD' + i).setAlign(Blockly.Input.Align.LEFT);\n            }\n        }\n        // Remove deleted inputs.\n        for (let i = this.itemCount_; this.getInput('ADD' + i); i++) {\n            this.removeInput('DUMMY' + i);\n            this.removeInput('ADD' + i);\n        }\n    };\n    this.updateShape_();\n};\nBlockly.Extensions.register('inline_text_join_extension', inlineTextJoinExtension);\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Defines inline_lists_create_with, which is an alternative\n * version of the lists_create_with block that specifies inline input mode and\n * adds dummy inputs between value inputs.\n */\nimport * as Blockly from 'blockly/core';\nconst builtInListBlock = Blockly.Blocks['lists_create_with'];\n// Define a new block that is based on the built-in block, but overriding the\n// init and updateShape_ methods to enabline inline input mode and insert dummy\n// inputs between value inputs.\nBlockly.Blocks['inline_lists_create_with'] = Object.assign({}, builtInListBlock, {\n    init: function () {\n        builtInListBlock.init.apply(this);\n        this.inputsInline = true;\n    },\n    /* eslint-disable @typescript-eslint/naming-convention */\n    updateShape_: function () {\n        /* eslint-enable @typescript-eslint/naming-convention */\n        if (this.itemCount_ && this.getInput('EMPTY')) {\n            this.removeInput('EMPTY');\n        }\n        else if (!this.itemCount_ && !this.getInput('EMPTY')) {\n            this.appendDummyInput('EMPTY').appendField(Blockly.Msg['LISTS_CREATE_EMPTY_TITLE']);\n        }\n        // Add new inputs.\n        for (let i = 0; i < this.itemCount_; i++) {\n            if (!this.getInput('ADD' + i)) {\n                const dummy = this.appendDummyInput('DUMMY' + i);\n                if (i === 0) {\n                    dummy.appendField(Blockly.Msg['LISTS_CREATE_WITH_INPUT_WITH']);\n                }\n                this.appendValueInput('ADD' + i).setAlign(Blockly.Input.Align.LEFT);\n            }\n        }\n        // Remove deleted inputs.\n        for (let i = this.itemCount_; this.getInput('ADD' + i); i++) {\n            this.removeInput('DUMMY' + i);\n            this.removeInput('ADD' + i);\n        }\n    },\n});\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Defines inline_procedures_defreturn, which is an alternative\n * version of the procedures_defreturn block that specifies inline input mode.\n */\nimport * as Blockly from 'blockly/core';\n// Define a new block that is based on the built-in block, but overriding the\n// init method to enabline inline input mode.\nconst builtInProcedureBlock = Blockly.Blocks['procedures_defreturn'];\nBlockly.Blocks['inline_procedures_defreturn'] = Object.assign({}, builtInProcedureBlock, {\n    init: function () {\n        var _a;\n        builtInProcedureBlock.init.apply(this);\n        this.inputsInline = true;\n        (_a = this.getInput('RETURN')) === null || _a === void 0 ? void 0 : _a.setAlign(Blockly.Input.Align.LEFT);\n    },\n});\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as Blockly from 'blockly/core';\nimport { addInlineRowSeparators, InlineRenderer } from './inline_row_separators_renderer';\nimport './inline_text_join';\nimport './inline_lists_create_with';\nimport './inline_procedures_defreturn';\nexport { addInlineRowSeparators, InlineRenderer };\n/**\n * Replaces the built-in block definitions for \"text_join\",\n * \"lists_create_with\", and \"procedures_defreturn\" with alternatives that\n * render the value inputs as inline inputs on separate rows.\n */\nexport const overrideOldBlockDefinitions = function () {\n    Blockly.Blocks['text_join'] = Blockly.Blocks['inline_text_join'];\n    Blockly.Blocks['lists_create_with'] =\n        Blockly.Blocks['inline_lists_create_with'];\n    Blockly.Blocks['procedures_defreturn'] =\n        Blockly.Blocks['inline_procedures_defreturn'];\n};\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__573__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","addInlineRowSeparators","rendererBase","renderInfoBase","InlineRenderInfo","shouldStartNewRow_","input","lastInput","type","super","makeRenderInfo_","block","InlineRenderer","inputsInline","updateShape_","itemCount_","getInput","removeInput","appendDummyInput","appendField","newQuote_","dummy","appendValueInput","setAlign","builtInListBlock","assign","init","apply","builtInProcedureBlock","_a","overrideOldBlockDefinitions"],"sourceRoot":""}