/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fileoverview Plugin for converting shadow blocks to real ones on edit.
 */
import * as Blockly from 'blockly/core';
import { Block } from 'blockly/core/block';
import { Abstract } from 'blockly/core/events/events_abstract';
import { BlockChangeJson } from 'blockly/core/events/events_block_change';
/**
 * A new blockly event class specifically for recording changes to the shadow
 * state of a block. This implementation is similar to and could be merged with
 * the implementation of Blockly.Events.BlockChange in Blockly core code.
 */
export declare class BlockShadowChange extends Blockly.Events.BlockBase {
    /**
     * The name of the event type for broadcast and listening purposes.
     */
    static readonly EVENT_TYPE = "block_shadow_change";
    /**
     * The previous value of the field.
     */
    oldValue: unknown;
    /**
     * The new value of the field.
     */
    newValue: unknown;
    /**
     * The constructor for a new BlockShadowChange event.
     * @param block The changed block. Undefined for a blank event.
     * @param oldValue Previous value of shadow state.
     * @param newValue New value of shadow state.
     */
    constructor(block?: Block, oldValue?: boolean, newValue?: boolean);
    /**
     * Encode the event as JSON.
     * @returns JSON representation.
     * @override
     */
    toJson(): BlockChangeJson;
    /**
     * Decode the JSON event.
     * @param json JSON representation.
     * @override
     */
    fromJson(json: BlockChangeJson): void;
    /**
     * Does this event record any change of state?
     * @returns False if something changed.
     * @override
     */
    isNull(): boolean;
    /**
     * Run a change event.
     * @param forward True if run forward, false if run backward (undo).
     * @override
     */
    run(forward: boolean): void;
}
/**
 * Add this function to your workspace as a change listener to automatically
 * convert shadow blocks to real blocks whenever the user edits a field on the
 * block, like this:
 *
 * workspace.addChangeListener(shadowBlockConversionChangeListener);
 *
 * Ideally the Blockly.Field.prototype.setValue method should handle this logic,
 * but for the purposes of this plugin it can be a workspace change listener.
 *
 * @param event An event broadcast by the workspace.
 */
export declare function shadowBlockConversionChangeListener(event: Abstract): void;
//# sourceMappingURL=shadow_block_converter.d.ts.map